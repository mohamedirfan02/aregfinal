import 'dart:ui';

import 'package:areg_app/common/app_colors.dart';
import 'package:areg_app/common/k_linear_gradient_bg.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:loading_indicator/loading_indicator.dart'; // ‚úÖ Import loading indicator package
import '../../common/custom_back_button.dart';
import '../../common/custom_button.dart';
import '../../common/custom_textformfield.dart';
import '../../common/forgotPassword_text_button.dart';
import '../../fbo_services/UserAuthentication.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _isLoading = false; // ‚úÖ Track loading state

  void _showTopSnackbar(
    String message, {
    Color backgroundColor = Colors.black87,
    Color textColor = Colors.white,
    Widget? icon,
  }) {
    final overlay = Overlay.of(context);
    final overlayEntry = OverlayEntry(
      builder: (context) => Positioned(
        top: MediaQuery.of(context).viewPadding.top + 16,
        left: 20,
        right: 20,
        child: Material(
          color: Colors.transparent,
          child: ClipRRect(
            borderRadius: BorderRadius.circular(12),
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
              child: Container(
                padding:
                    const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
                decoration: BoxDecoration(
                  color: backgroundColor.withOpacity(0.6),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  children: [
                    if (icon != null) ...[
                      icon,
                      SizedBox(width: 10),
                    ],
                    Expanded(
                      // THIS is the fix
                      child: Text(
                        message,
                        overflow: TextOverflow.ellipsis,
                        maxLines: 2,
                        style: TextStyle(
                          color: textColor,
                          fontSize: 15,
                          fontWeight: FontWeight.w700,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );

    overlay.insert(overlayEntry);
    Future.delayed(const Duration(seconds: 2))
        .then((_) => overlayEntry.remove());
  }

  Future<void> _storeLoginData(
      String token, String email, String userId, String role) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_id', userId);
    await prefs.setString('token', token);
    await prefs.setString('email', email);
    await prefs.setString('userId', userId);
    await prefs.setString('role', role);

    if (role == 'vendor') {
      await prefs.setString('vendor_id', userId);
      print("‚úÖ Vendor ID stored: $userId");
    } else if (role == 'user') {
      await prefs.setString('restaurant_user_id', userId);
      print("‚úÖ Restaurant User ID stored: $userId");
    } else if (role == 'agent') {
      await prefs.setString('agent_id', userId);
      print("‚úÖ Agent ID stored: $userId");
    }
    print("‚úÖ User ID stored: $userId");
    print("‚úÖ Token stored: $token");
    print("‚úÖ Email stored: $email");
    print("‚úÖ Role stored: $role");
  }

  Future<void> _login() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true); // ‚úÖ Show loading indicator

      var username = _emailController.text.trim();
      var password = _passwordController.text.trim();

      final user = await UserAuthentication.loginUser(username, password);
      print("üîπ API Response: $user");

      setState(
          () => _isLoading = false); // ‚úÖ Hide loading indicator after API call

      if (user.containsKey('token')) {
        String token = user['token'];
        String role = user['role'];
        String userId = "";
        Map<String, dynamic> userDetails = {};

        if (user['details'] is Map) {
          userDetails = user['details'];
          userId = userDetails['id'].toString();
        } else {
          print("‚ö†Ô∏è Warning: 'details' field is empty or not a map.");
        }

        await _storeLoginData(token, username, userId, role);

        Future.delayed(Duration(milliseconds: 500), () {
          if (role == 'vendor') {
            context.go('/VendorPage', extra: userDetails);
          } else if (role == 'user') {
            context.go('/UserHome', extra: {
              "role": user['role'], // e.g., "agent"
              "details": user['details'], // full map
            });
          } else if (role == 'agent') {
            context.go('/AgentPage', extra: {
              "role": user['role'], // e.g., "agent"
              "details": user['details'], // full map
            });
          } else {
            _showTopSnackbar(
              "Invalid role associated with your account",
              backgroundColor: Colors.white60,
              textColor: Colors.black,
              icon: Image.asset(
                'assets/icon/error.png',
                height: 24,
                width: 24,
              ),
            );
          }
        });
      } else {
        _showTopSnackbar(
          "Invalid email or password",
          backgroundColor: Colors.white60,
          textColor: Colors.black,
          icon: Image.asset(
            'assets/icon/error.png',
            height: 24,
            width: 24,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final double padding = size.width * 0.05;

    return Scaffold(
      resizeToAvoidBottomInset: true,
      body: KLinearGradientBg(
        gradientColor: AppColors.GradientColor,
        child: Stack(
          children: [
            LayoutBuilder(
              builder: (context, constraints) {
                return SingleChildScrollView(
                  padding: EdgeInsets.only(
                    bottom: MediaQuery.of(context).viewInsets.bottom,
                  ),
                  child: ConstrainedBox(
                    constraints:
                        BoxConstraints(minHeight: constraints.maxHeight),
                    child: Padding(
                      padding: EdgeInsets.symmetric(
                        horizontal: padding,
                        vertical: size.height * 0.07,
                      ),
                      child: Form(
                        key: _formKey,
                        child: Column(
                          children: [
                            const SizedBox(height: 40),
                            Center(
                              child: SizedBox(
                                width: 200,
                                height: 200,
                                child: Lottie.asset(
                                  'assets/animations/zz.json',
                                  fit: BoxFit.contain,
                                ),
                              ),
                            ),
                            const SizedBox(height: 20),
                            Stack(
                              children: [
                                Container(
                                  width: double.infinity,
                                  padding: const EdgeInsets.all(20),
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(16),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.1),
                                        blurRadius: 10,
                                        offset: const Offset(0, 20),
                                      ),
                                    ],
                                  ),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        'Log in',
                                        style: TextStyle(
                                          fontSize: size.width * 0.09,
                                          fontWeight: FontWeight.bold,
                                          color: const Color(0xFF006D04),
                                        ),
                                      ),
                                      const SizedBox(height: 8),
                                      Text(
                                        'Login to your account',
                                        style: TextStyle(
                                          fontSize: size.width * 0.05,
                                          color: Colors.black,
                                        ),
                                      ),
                                      const SizedBox(height: 20),
                                      CustomTextFormField(
                                        controller: _emailController,
                                        hintText: 'Email Address',
                                        iconData: Icons.mail_outline_rounded,
                                        keyboardType:
                                            TextInputType.emailAddress,
                                        validator: (value) {
                                          if (value == null || value.isEmpty) {
                                            return 'Please enter a valid email';
                                          }
                                          return null;
                                        },
                                      ),
                                      const SizedBox(height: 16),
                                      CustomTextFormField(
                                        controller: _passwordController,
                                        hintText: 'Password',
                                        iconData: Icons.lock_outline_rounded,
                                        keyboardType:
                                            TextInputType.visiblePassword,
                                        validator: (value) {
                                          if (value == null || value.isEmpty) {
                                            return 'Please enter your password';
                                          }
                                          return null;
                                        },
                                        isPassword: true,
                                      ),
                                      const SizedBox(height: 10),
                                      Align(
                                        alignment: Alignment.centerRight,
                                        child: CustomForgotPasswordButton(
                                          text: 'Forgot Password?',
                                          onPressed: () {
                                            context.push('/reset-password');
                                          },
                                        ),
                                      ),
                                      const SizedBox(height: 20),
                                      _isLoading
                                          ? Center(
                                              child: const SizedBox(
                                                height: 50,
                                                width: 50,
                                                child: LoadingIndicator(
                                                  indicatorType: Indicator
                                                      .ballSpinFadeLoader,
                                                  colors: [
                                                    Colors.green,
                                                    Colors.white38,
                                                    Colors.greenAccent
                                                  ],
                                                  strokeWidth: 2,
                                                ),
                                              ),
                                            )
                                          : Center(
                                              // ‚úÖ Centered the button
                                              child: CustomSubmitButton(
                                                buttonText: 'Sign in',
                                                onPressed: _login,
                                              ),
                                            ),
                                      const SizedBox(height: 20),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                );
              },
            ),
            Positioned(
              top: 40,
              left: 10,
              child: CustomBackButton(
                onPressed: () {
                  context.go('/start');
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
