import 'dart:ui';

import 'package:areg_app/common/app_colors.dart';
import 'package:areg_app/common/k_linear_gradient_bg.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:loading_indicator/loading_indicator.dart'; // ‚úÖ Import loading indicator package
import '../../common/custom_back_button.dart';
import '../../common/custom_button.dart';
import '../../common/custom_textformfield.dart';
import '../../common/forgotPassword_text_button.dart';
import '../../fbo_services/UserAuthentication.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _isLoading = false; // ‚úÖ Track loading state

  void _showTopSnackbar(
    String message, {
    Color backgroundColor = Colors.black87,
    Color textColor = Colors.white,
    Widget? icon,
  }) {
    final overlay = Overlay.of(context);
    final overlayEntry = OverlayEntry(
      builder: (context) => Positioned(
        top: MediaQuery.of(context).viewPadding.top + 16,
        left: 20,
        right: 20,
        child: Material(
          color: Colors.transparent,
          child: ClipRRect(
            borderRadius: BorderRadius.circular(12),
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
              child: Container(
                padding:
                    const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
                decoration: BoxDecoration(
                  color: backgroundColor.withOpacity(0.6),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  children: [
                    if (icon != null) ...[
                      icon,
                      SizedBox(width: 10),
                    ],
                    Expanded(
                      // THIS is the fix
                      child: Text(
                        message,
                        overflow: TextOverflow.ellipsis,
                        maxLines: 2,
                        style: TextStyle(
                          color: textColor,
                          fontSize: 15,
                          fontWeight: FontWeight.w700,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );

    overlay.insert(overlayEntry);
    Future.delayed(const Duration(seconds: 2))
        .then((_) => overlayEntry.remove());
  }

  Future<void> _storeLoginData(
      String token, String email, String userId, String role) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_id', userId);
    await prefs.setString('token', token);
    await prefs.setString('email', email);
    await prefs.setString('userId', userId);
    await prefs.setString('role', role);

    if (role == 'vendor') {
      await prefs.setString('vendor_id', userId);
      print("‚úÖ Vendor ID stored: $userId");
    } else if (role == 'user') {
      await prefs.setString('restaurant_user_id', userId);
      print("‚úÖ Restaurant User ID stored: $userId");
    } else if (role == 'agent') {
      await prefs.setString('agent_id', userId);
      print("‚úÖ Agent ID stored: $userId");
    }
    print("‚úÖ User ID stored: $userId");
    print("‚úÖ Token stored: $token");
    print("‚úÖ Email stored: $email");
    print("‚úÖ Role stored: $role");
  }

  Future<void> _login() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true); // ‚úÖ Show loading indicator

      var username = _emailController.text.trim();
      var password = _passwordController.text.trim();

      final user = await UserAuthentication.loginUser(username, password);
      print("üîπ API Response: $user");

      setState(
          () => _isLoading = false); // ‚úÖ Hide loading indicator after API call

      if (user.containsKey('token')) {
        String token = user['token'];
        String role = user['role'];
        String userId = "";
        Map<String, dynamic> userDetails = {};

        if (user['details'] is Map) {
          userDetails = user['details'];
          userId = userDetails['id'].toString();
        } else {
          print("‚ö†Ô∏è Warning: 'details' field is empty or not a map.");
        }

        await _storeLoginData(token, username, userId, role);

        Future.delayed(Duration(milliseconds: 500), () {
          if (role == 'vendor') {
            context.go('/VendorPage', extra: userDetails);
          } else if (role == 'user') {
            context.go('/UserHome', extra: {
              "role": user['role'], // e.g., "agent"
              "details": user['details'], // full map
            });
          } else if (role == 'agent') {
            context.go('/AgentPage', extra: {
              "role": user['role'], // e.g., "agent"
              "details": user['details'], // full map
            });
          } else {
            _showTopSnackbar(
              "Invalid role associated with your account",
              backgroundColor: Colors.white60,
              textColor: Colors.black,
              icon: Image.asset(
                'assets/icon/error.png',
                height: 24,
                width: 24,
              ),
            );
          }
        });
      } else {
        _showTopSnackbar(
          "Invalid email or password",
          backgroundColor: Colors.white60,
          textColor: Colors.black,
          icon: Image.asset(
            'assets/icon/error.png',
            height: 24,
            width: 24,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final double padding = size.width * 0.05;

    return Scaffold(
      resizeToAvoidBottomInset: true,
      body: KLinearGradientBg(
        gradientColor: AppColors.GradientColor,
        child: Stack(
          children: [
            LayoutBuilder(
              builder: (context, constraints) {
                return SingleChildScrollView(
                  padding: EdgeInsets.only(
                    bottom: MediaQuery.of(context).viewInsets.bottom,
                  ),
                  child: ConstrainedBox(
                    constraints:
                        BoxConstraints(minHeight: constraints.maxHeight),
                    child: Padding(
                      padding: EdgeInsets.symmetric(
                        horizontal: padding,
                        vertical: size.height * 0.07,
                      ),
                      child: Form(
                        key: _formKey,
                        child: Column(
                          children: [
                            const SizedBox(height: 40),
                            Center(
                              child: SizedBox(
                                width: 200,
                                height: 200,
                                child: Lottie.asset(
                                  'assets/animations/zz.json',
                                  fit: BoxFit.contain,
                                ),
                              ),
                            ),
                            const SizedBox(height: 20),
                            Stack(
                              children: [
                                Container(
                                  width: double.infinity,
                                  padding: const EdgeInsets.all(20),
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(16),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.1),
                                        blurRadius: 10,
                                        offset: const Offset(0, 20),
                                      ),
                                    ],
                                  ),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        'Log in',
                                        style: TextStyle(
                                          fontSize: size.width * 0.09,
                                          fontWeight: FontWeight.bold,
                                          color: const Color(0xFF006D04),
                                        ),
                                      ),
                                      const SizedBox(height: 8),
                                      Text(
                                        'Login to your account',
                                        style: TextStyle(
                                          fontSize: size.width * 0.05,
                                          color: Colors.black,
                                        ),
                                      ),
                                      const SizedBox(height: 20),
                                      CustomTextFormField(
                                        controller: _emailController,
                                        hintText: 'Email Address',
                                        iconData: Icons.mail_outline_rounded,
                                        keyboardType:
                                            TextInputType.emailAddress,
                                        validator: (value) {
                                          if (value == null || value.isEmpty) {
                                            return 'Please enter a valid email';
                                          }
                                          return null;
                                        },
                                      ),
                                      const SizedBox(height: 16),
                                      CustomTextFormField(
                                        controller: _passwordController,
                                        hintText: 'Password',
                                        iconData: Icons.lock_outline_rounded,
                                        keyboardType:
                                            TextInputType.visiblePassword,
                                        validator: (value) {
                                          if (value == null || value.isEmpty) {
                                            return 'Please enter your password';
                                          }
                                          return null;
                                        },
                                        isPassword: true,
                                      ),
                                      const SizedBox(height: 10),
                                      Align(
                                        alignment: Alignment.centerRight,
                                        child: CustomForgotPasswordButton(
                                          text: 'Forgot Password?',
                                          onPressed: () {
                                            context.push('/reset-password');
                                          },
                                        ),
                                      ),
                                      const SizedBox(height: 20),
                                      _isLoading
                                          ? Center(
                                              child: const SizedBox(
                                                height: 50,
                                                width: 50,
                                                child: LoadingIndicator(
                                                  indicatorType: Indicator
                                                      .ballSpinFadeLoader,
                                                  colors: [
                                                    Colors.green,
                                                    Colors.white38,
                                                    Colors.greenAccent
                                                  ],
                                                  strokeWidth: 2,
                                                ),
                                              ),
                                            )
                                          : Center(
                                              // ‚úÖ Centered the button
                                              child: CustomSubmitButton(
                                                buttonText: 'Sign in',
                                                onPressed: _login,
                                              ),
                                            ),
                                      const SizedBox(height: 20),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                );
              },
            ),
            Positioned(
              top: 40,
              left: 10,
              child: CustomBackButton(
                onPressed: () {
                  context.go('/start');
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
fob home page

import 'dart:convert';
import 'package:areg_app/common/app_colors.dart';
import 'package:areg_app/common/k_linear_gradient_bg.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../common/custom_appbar.dart';
import 'package:shimmer/shimmer.dart' as shimmer;
import '../../config/api_config.dart';
import '../../fbo_services/oil_sale_service.dart';


class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int currentIndex = 1; // Home is active
  String? userId;
  Map<String, dynamic>? userData;
  bool isLoading = true;
  bool hasError = false;

  Future<void> _onRefresh() async {
    setState(() {
      isLoading = true;
      hasError = false;
    });

    await _fetchUserData(); // Re-fetch user data on pull-down
  }

  @override
  void initState() {
    super.initState();
    _loadUserId(); // Load user ID first
  }
  // ‚úÖ Load User ID from SharedPreferences
  Future<void> _loadUserId() async {
    final prefs = await SharedPreferences.getInstance();
    String? storedUserId = prefs.getString('userId');
    if (!mounted) return; // üëà prevents setState if widget is disposed
    if (storedUserId != null) {
      print("‚úÖ Loaded User ID from SharedPreferences: $storedUserId");
      setState(() {
        userId = storedUserId;
      });
      _fetchUserData();
    } else {
      print("‚ùå No user ID found in SharedPreferences.");
      setState(() {
        hasError = true;
        isLoading = false;
      });
    }
  }

Future <void> _fetchUserData() async {
    final data = await OilSaleService.fetchOilSaleData();
    if (!mounted) return; // üëà prevents setState if widget is disposed

    if (data != null) {
      setState(() {
        userData = data;
        isLoading = false;
      });
    } else {
      setState(() {
        hasError = true;
        isLoading = false;
      });
    }
  }
  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;
    return Scaffold(
      appBar: const PreferredSize(
        preferredSize: Size.fromHeight(kToolbarHeight),
        child: CustomAppBar(),
      ),
      body: KLinearGradientBg(
        gradientColor: AppColors.GradientColor,

        child: SafeArea(
            child: LayoutBuilder(
              builder: (context, constraints) {
                return Scrollbar(
                  child: RefreshIndicator(
                    onRefresh: _onRefresh,
                    child: SingleChildScrollView(
                      padding: EdgeInsets.only(bottom: screenHeight * 0.05),
                      child: Stack(
                        children: [
                          Positioned(
                            top: -2,
                            left: -2,
                            child: Container(
                              width: constraints.maxWidth,
                              height: constraints.maxHeight * 0.22, // ~22% of screen height
                              decoration: BoxDecoration(
                                color: Theme.of(context).brightness == Brightness.dark
                                    ? Theme.of(context).colorScheme.surfaceVariant
                                    :  AppColors.primaryGreen,
                                border: Border.all(
                                  width: 1.28,
                                  color: Theme.of(context).dividerColor.withOpacity(0.2),
                                ),
                              ),
                            ),


                          ),


                          // Main content
                          Column(
                            children: [
                              if (isLoading)
                                _buildShimmerList()
                              else if (hasError)
                                const Text("To many attempt please wait for 5 to 10 sec and switch tab", style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold))
                              else
                                buildUserData(screenWidth, context ),
                              const SizedBox(height: 10),
                              //MyWidget(),
                              _buildReuseOilPickup(screenWidth,context),
                              _buildMonthlyDropdown(screenWidth, context),
                              const SizedBox(height: 10),
                              buildWeeklyProgress(screenWidth, userData?["weekly"] ?? []),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
      ),
    );
  }

  Widget _buildShimmerList() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // ‚úÖ Shimmer for Total Revenue Section
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              _shimmerBox(height: 32, width: 120), // Fake Revenue
              _shimmerBox(height: 60, width: 60), // Fake Circular Indicator
            ],
          ),
        ),
        const SizedBox(height: 10),
        // ‚úÖ Shimmer for Online & Cash Payment Progress Bars
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(child: _shimmerBox(height: 20, width: 100)), // Fake Online Payment
              const SizedBox(width: 10),
              Expanded(child: _shimmerBox(height: 20, width: 100)), // Fake Cash Payment
            ],
          ),
        ),
        const SizedBox(height: 10),
        // ‚úÖ Shimmer for Weekly Progress Cards
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: List.generate(
                4,
                    (index) => Container(
                  margin: const EdgeInsets.symmetric(horizontal: 8),
                  child: _shimmerBox(height: 100, width: 80), // Fake Week Card
                ),
              ),
            ),
          ),
        ),
        const SizedBox(height: 20),
        // ‚úÖ Shimmer for Oil Pickup Section
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: _shimmerBox(height: 50, width: double.infinity),
        ),
      ],
    );
  }
  /// ‚úÖ Shimmer Box Helper Function
  Widget _shimmerBox({double height = 20, double width = double.infinity}) {
    return shimmer.Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: Container(
        height: height,
        width: width,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  Widget buildUserData(double screenWidth, BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final formatter = NumberFormat('#,##0'); // Create number formatter

    if (userData == null) {
      return const Text(
        "‚ùå Too many attempts, please wait 5‚Äì10 seconds and switch tab",
        style: TextStyle(color: Colors.red),
      );
    }

    final totalRevenue = userData?["total"]?["revenue"] ?? 0;
    final totalQuantity = userData?["total"]?["quantity"] ?? 0;
    final onlinePayment = userData?["total_online_payment"] ?? 0;
    final cashPayment = userData?["total_cash_payment"] ?? 0;

    return Column(
      children: [
        // üíö Green Card
        Container(
          margin: const EdgeInsets.all(16),
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
          decoration: BoxDecoration(
            image: const DecorationImage(
              image: AssetImage("assets/image/cover.png"),
              fit: BoxFit.cover,
            ),
            color: isDark ? const Color(0xFF2F4F1F) : const Color(0xFF6FA006),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            children: [
              Text(
                'Year 2025',
                style: TextStyle(
                  color: isDark ? Colors.white : Colors.black,
                  fontWeight: FontWeight.bold,
                  fontSize: 22,
                ),
              ),
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  Column(
                    children: [
                      Text(
                        'Total Amount',
                        style: TextStyle(
                          color: isDark ? Colors.white70 : Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: 18,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Text(
                            '‚Çπ ${formatter.format(totalRevenue)}', // Format with commas
                            style: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 22,
                            ),
                          ),
                          const SizedBox(width: 4),
                          Lottie.asset(
                            'assets/animations/money.json',
                            width: 30,
                            height: 30,
                            repeat: true,
                            fit: BoxFit.cover,
                          ),
                        ],
                      ),
                    ],
                  ),
                  Column(
                    children: [
                      Text(
                        'Total Oil KG',
                        style: TextStyle(
                          color: isDark ? Colors.white70 : Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: 18,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Lottie.asset(
                            'assets/animations/fuelnew.json',
                            width: 30,
                            height: 30,
                            repeat: true,
                            fit: BoxFit.cover,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            '${formatter.format(totalQuantity)} Kg', // Format with commas
                            style: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 22,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
              const SizedBox(height: 12),
              Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Lottie.asset(
                    'assets/animations/hand.json',
                    width: 50,
                    height: 50,
                    repeat: true,
                    fit: BoxFit.cover,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: LinearProgressIndicator(
                      value: (totalQuantity / 1000).clamp(0.0, 1.0),
                      backgroundColor: isDark ? Colors.white10 : Colors.white30,
                      color: Colors.white,
                      minHeight: 8,
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Lottie.asset(
                    'assets/animations/hand.json',
                    width: 50,
                    height: 50,
                    repeat: true,
                    fit: BoxFit.cover,
                  ),
                ],
              ),
            ],
          ),
        ),
        Padding(
          padding: EdgeInsets.only(left: screenWidth * 0.05, bottom: 6),
          child: Align(
            alignment: Alignment.centerLeft,
            child: Text(
              "Money That You've Earned!",
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: isDark ? Colors.white : Color(0xFF006D04),
              ),
            ),
          ),
        ),
        // üíµ Online & Cash Amount
        Padding(
          padding: EdgeInsets.symmetric(horizontal: screenWidth * 0.05),
          child: Row(
            children: [
              Expanded(
                child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  margin: const EdgeInsets.symmetric(horizontal: 6),
                  decoration: BoxDecoration(
                    color: isDark ? const Color(0xFF1F1F1F) : Colors.white,
                    border: Border.all(color: const Color(0xFF6FA006)),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Column(
                    children: [
                      Text(
                        "Online Transfer",
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: isDark ? Colors.white70 : Colors.black,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            "‚Çπ ${formatter.format(onlinePayment)}", // Format with commas and add currency symbol
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: isDark
                                  ? Colors.lightGreenAccent
                                  : const Color(0xFF006D04),
                            ),
                          ),
                          const SizedBox(width: 4),
                          Lottie.asset(
                            'assets/animations/online.json',
                            width: 40,
                            height: 40,
                            repeat: true,
                            fit: BoxFit.cover,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
              Expanded(
                child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  margin: const EdgeInsets.symmetric(horizontal: 6),
                  decoration: BoxDecoration(
                    color: isDark ? const Color(0xFF1F1F1F) : Colors.white,
                    border: Border.all(color: const Color(0xFF6FA006)),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Column(
                    children: [
                      Text(
                        "Cash Amount",
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: isDark ? Colors.white70 : Colors.black,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            "‚Çπ ${formatter.format(cashPayment)}", // Format with commas and add currency symbol
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: isDark
                                  ? Colors.lightGreenAccent
                                  : const Color(0xFF006D04),
                            ),
                          ),
                          const SizedBox(width: 4),
                          Lottie.asset(
                            'assets/animations/money.json',
                            width: 40,
                            height: 40,
                            repeat: true,
                            fit: BoxFit.cover,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

// ‚úÖ Show weekly progress dynamically, ensuring 4 weeks are displayed
  Widget buildWeeklyProgress(double screenWidth, List weeklyData) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    final textColor = isDarkMode ? Colors.white : const Color(0xFF006D04);
    final subTextColor = isDarkMode ? Colors.white70 : Colors.black;
    final cardBackground = isDarkMode ? const Color(0xFF1E1E1E) : Colors.white;
    final borderColor = isDarkMode ? Colors.white24 : Colors.black12;

    List<Map<String, dynamic>> defaultWeeks = [
      {"week": 1, "quantity": 0, "revenue": 0},
      {"week": 2, "quantity": 0, "revenue": 0},
      {"week": 3, "quantity": 0, "revenue": 0},
      {"week": 4, "quantity": 0, "revenue": 0},
    ];

    for (var weekData in weeklyData) {
      int weekNumber = weekData["week"];
      if (weekNumber >= 1 && weekNumber <= 4) {
        defaultWeeks[weekNumber - 1] = weekData;
      }
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: screenWidth * 0.04, vertical: 8),
          child: Text(
            "Weekly Oil Collection Summary",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w600,
              color: textColor,
            ),
          ),
        ),
        SingleChildScrollView(
          scrollDirection: Axis.horizontal,
          padding: EdgeInsets.symmetric(horizontal: screenWidth * 0.04),
          child: Row(
            children: defaultWeeks.map<Widget>((week) {
              return _buildWeekCard(
                "Week ${week["week"]}",
                week["quantity"] > 0 ? "${week["quantity"]}KG / ${week["revenue"]}‚Çπ" : "0 KG / 0 ‚Çπ",
                week["quantity"] > 0 ? week["quantity"] / 100 : 0,
                screenWidth,
                textColor,
                subTextColor,
                cardBackground,
                borderColor,
              );
            }).toList(),
          ),
        ),
        Padding(
          padding: const EdgeInsets.only(top: 10),
          child: Center(
            child: Text(
              "<  ${_getMonthName(DateTime.now().month)}  >",
              style: TextStyle(
                fontSize: 18,
                color: subTextColor,
              ),
            ),
          ),
        ),
      ],
    );
  }

// ‚úÖ Helper function to get month name
  String _getMonthName(int month) {
    List<String> months = [
      "January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November", "December"
    ];
    return months[month - 1];
  }
// Add this method to build Monthly Dropdown and Voucher Button side by side
  Widget _buildMonthlyDropdown(double screenWidth, BuildContext context) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;

    return Container(
      child: Padding(
        padding: EdgeInsets.symmetric(horizontal: screenWidth * 0.05, vertical: 10),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Select Month & View Vouchers",
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: isDarkMode ? Colors.white : const Color(0xFF006D04), // üåì Text color
              ),
            ),
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // üóì Monthly Dropdown
                Expanded(
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 10),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      border: Border.all(color: isDarkMode ? Colors.white38 : Colors.black26),
                      color: isDarkMode ? Colors.grey[900] : Colors.white,
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<int>(
                        dropdownColor: isDarkMode ? Colors.grey[900] : Colors.white,
                        value: 1,
                        items: List.generate(12, (index) {
                          return DropdownMenuItem<int>(
                            value: index + 1,
                            child: Text(
                              _getMonthName(index + 1),
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                color: isDarkMode ? Colors.white : const Color(0xFF006D04),
                              ),
                            ),
                          );
                        }),
                        onChanged: (int? newMonth) {
                          if (newMonth != null) {
                            GoRouter.of(context).push(
                              '/monthly-view',
                              extra: {'month': newMonth},
                            );

                          }
                        },
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                // üé´ Voucher Button
                GestureDetector(
                   onTap: () {
                           context.push('/voucherPage'); // ‚úÖ Go to voucher pa
                   },
                   child: Container(
                    padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 25),
                    decoration: BoxDecoration(
                      color: isDarkMode ? const Color(0xFF6FA006) : const Color(0xFF699706),
                      borderRadius: BorderRadius.circular(10),
                      boxShadow: [
                        BoxShadow(
                          color: isDarkMode
                              ? Colors.black.withOpacity(0.6)
                              : Colors.black.withOpacity(0.3),
                          offset: const Offset(3, 4),
                          blurRadius: 6,
                        ),
                        BoxShadow(
                          color: isDarkMode ? Colors.white12 : Colors.white24,
                          offset: const Offset(-2, -2),
                          blurRadius: 4,
                        ),
                      ],
                    ),
                    child: const Text(
                      "Voucher",
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                        shadows: [
                          Shadow(
                            offset: Offset(1, 1),
                            blurRadius: 2,
                            color: Colors.black38,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildWeekCard(String week, String details, double progress, double screenWidth, Color textColor, Color subTextColor, Color cardBackground, Color borderColor) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: screenWidth * 0.03),
      padding: EdgeInsets.all(screenWidth * 0.03),
      width: screenWidth * 0.25,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: Colors.black12, width: 1), // ‚úÖ Border added
        // boxShadow removed
      ),
      child: Column(
        children: [
          Text(
            week,
            style: const TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w100,
              color: Color(0xFF006D04),
            ),
          ),
          Text(
            details,
            style: const TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w100,
              color: Color(0xFF006D04),
            ),
          ),
          const SizedBox(height: 5),
        ],
      ),
    );
  }
// ‚úÖ Reuse oil pickup section with separate Voucher button
  Widget _buildReuseOilPickup(double screenWidth, BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;

    return Padding(
      padding: EdgeInsets.symmetric(horizontal: screenWidth * 0.05, vertical: 20),
      child: Container(
        padding: const EdgeInsets.all(10),
        decoration: BoxDecoration(
          color: isDark ? const Color(0xFF558400) : const Color(0xFF6FA006),
          borderRadius: BorderRadius.circular(15),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              "Manage Oil Pickup",
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            SizedBox(height: 4), // spacing between title & subtitle
            Text(
              "Confirm request a sale of your Used oil",
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.normal,
                color: Colors.white70,
              ),
            ),

            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: _buildActionButton(
                    title: "Acknowledge",
                    context: context,
                    onTap: () {
                      context.push('/FboAcknowledgmentScreen'); // ‚úÖ Go to voucher pa
                    },
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: _buildActionButton(
                    title: "Request Sale",
                    context: context,
                    onTap: () {
                      context.push('/OilPlacedScreen'); // ‚úÖ Go to voucher pa
                    },
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActionButton({
    required String title,
    required VoidCallback onTap,
    required BuildContext context,
  }) {
    bool _isPressed = false;
    final isDark = Theme.of(context).brightness == Brightness.dark;

    return StatefulBuilder(
      builder: (context, setState) {
        return GestureDetector(
          onTapDown: (_) => setState(() => _isPressed = true),
          onTapUp: (_) {
            setState(() => _isPressed = false);
            onTap();
          },
          onTapCancel: () => setState(() => _isPressed = false),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 150),
            transform: _isPressed
                ? (Matrix4.identity()..scale(0.97))
                : Matrix4.identity(),
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: isDark ? const Color(0xFF2E2E2E) : Colors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: isDark ? Colors.black54 : Colors.black26,
                  offset: const Offset(2, 2),
                  blurRadius: 6,
                ),
              ],
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // Title text
                Expanded(
                  child: Text(
                    title,
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 15,
                      fontWeight: FontWeight.bold,
                      color: isDark
                          ? Colors.lightGreenAccent.shade100
                          : const Color(0xFF006D04),
                    ),
                  ),
                ),

                const SizedBox(width: 10),

                // Arrow container
                Container(
                  padding: const EdgeInsets.all(6),
                  decoration: BoxDecoration(
                    color: isDark ? Colors.black : Colors.white,
                    borderRadius: BorderRadius.circular(8),
                    boxShadow: [
                      BoxShadow(
                        color: isDark ? Colors.black87 : Colors.black26,
                        offset: const Offset(2, 2),
                        blurRadius: 4,
                      ),
                    ],
                  ),
                  child: Icon(
                    Icons.arrow_forward,
                    size: 18,
                    color: isDark
                        ? Colors.lightGreenAccent.shade100
                        : const Color(0xFF006D04),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }


}
class MyWidget extends StatefulWidget {
  @override
  _MyWidgetState createState() => _MyWidgetState();
}
class _MyWidgetState extends State<MyWidget> {
  bool isLoading = true;
  bool hasError = false;
  List<Map<String, dynamic>> rangeDataList = []; // Declare list here
  @override
  void initState() {
    super.initState();
    fetchRangeData();
  }
  Future<void> fetchRangeData() async {
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      String? token = prefs.getString('token');

      Map<String, String> headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      };

      final response = await http.get(
        Uri.parse(ApiConfig.getRange),
        headers: headers,
      );

      print("Response Status Code: ${response.statusCode}");
      print("Response Body: ${response.body}");

      if (response.statusCode == 200) {
        final jsonData = json.decode(response.body);
        if (jsonData['data'] != null && jsonData['data'].isNotEmpty) {
          if (!mounted) return; // ‚úÖ Check before setState
          setState(() {
            rangeDataList = List<Map<String, dynamic>>.from(jsonData['data']);
            isLoading = false;
          });

          print("üü¢ Updated rangeDataList: $rangeDataList"); // Debugging
        } else {
          if (!mounted) return; // ‚úÖ Check before setState
          setState(() {
            hasError = true;
            isLoading = false;
          });
        }
      } else {
        if (!mounted) return; // ‚úÖ Check before setState
        setState(() {
          hasError = true;
          isLoading = false;
        });
      }
    } catch (e) {
      if (!mounted) return; // ‚úÖ Check before setState
      setState(() {
        hasError = true;
        isLoading = false;
      });
      print('Error: $e');
    }
  }
  Widget _buildRangeList() {
    print("üîπ UI Rebuilding with rangeDataList: $rangeDataList");

    if (isLoading) {
      return const Center(child: CircularProgressIndicator());
    }
    if (hasError || rangeDataList.isEmpty) {
      return const Center(
        child: Text("Failed to load price ranges", style: TextStyle(color: Colors.red)),
      );
    }
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Text(
            "Oil Amount Price List",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Color(0xFF006D04),
            ),
          ),
        ),
        SizedBox(
          height: 70,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 16),
            itemCount: rangeDataList.length,
            itemBuilder: (context, index) {
              final rangeData = rangeDataList[index];
              return Container(
                width: 220,
                margin: const EdgeInsets.only(right: 12),
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  color: const Color(0x1A87BD23),
                  borderRadius: BorderRadius.circular(10),
                  border: Border.all(color: const Color(0x1A87BD23),),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.04),
                      blurRadius: 3,
                      offset: const Offset(0, 1),
                    ),
                  ],
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "From: ${rangeData['from']}Kg",
                      style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w700,   color: Color(0xFF006D04),),
                    ),
                    Text(
                      "To: ${rangeData['to']}Kg",
                      style: const TextStyle(fontSize: 12, fontWeight: FontWeight.w700,  color: Color(0xFF006D04),),
                    ),
                    Text(
                      "‚Çπ${rangeData['price']}",
                      style: const TextStyle(
                        color: Color(0xFF006D04),
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              );
            },
          ),
        ),
      ],
    );
  }
  @override
  Widget build(BuildContext context) {
    return _buildRangeList();
  }
}

/////// fbo home//////////

import 'dart:convert';
import 'package:areg_app/common/app_colors.dart';
import 'package:areg_app/common/floating_chatbot_btn.dart';
import 'package:areg_app/common/k_linear_gradient_bg.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../common/custom_appbar.dart';
import 'package:shimmer/shimmer.dart' as shimmer;
import '../../config/api_config.dart';
import '../../fbo_services/oil_sale_service.dart';

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int currentIndex = 1; // Home is active
  String? userId;
  Map<String, dynamic>? userData;
  bool isLoading = true;
  bool hasError = false;

  Future<void> _onRefresh() async {
    setState(() {
      isLoading = true;
      hasError = false;
    });

    await _fetchUserData(); // Re-fetch user data on pull-down
  }

  @override
  void initState() {
    super.initState();
    _loadUserId(); // Load user ID first
  }

  // ‚úÖ Load User ID from SharedPreferences
  Future<void> _loadUserId() async {
    final prefs = await SharedPreferences.getInstance();
    String? storedUserId = prefs.getString('userId');
    if (!mounted) return; // üëà prevents setState if widget is disposed
    if (storedUserId != null) {
      print("‚úÖ Loaded User ID from SharedPreferences: $storedUserId");
      setState(() {
        userId = storedUserId;
      });
      _fetchUserData();
    } else {
      print("‚ùå No user ID found in SharedPreferences.");
      setState(() {
        hasError = true;
        isLoading = false;
      });
    }
  }

  Future<void> _fetchUserData() async {
    final data = await OilSaleService.fetchOilSaleData();
    if (!mounted) return; // üëà prevents setState if widget is disposed

    if (data != null) {
      setState(() {
        userData = data;
        isLoading = false;
      });
    } else {
      setState(() {
        hasError = true;
        isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    double screenWidth = MediaQuery.of(context).size.width;
    double screenHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      appBar: const PreferredSize(
        preferredSize: Size.fromHeight(kToolbarHeight),
        child: CustomAppBar(),
      ),
      body: Stack(
        children: [
          KLinearGradientBg(
            gradientColor: AppColors.GradientColor,
            child: SafeArea(
              child: Column(
                // Change this from SingleChildScrollView to Column
                children: [
                  // Top content (not scrollable)
                  if (isLoading)
                    _buildShimmerList()
                  else if (hasError)
                    const Text(
                      "Too many attempts, please wait for 5 to 10 sec and switch tab",
                      style: TextStyle(
                          color: Colors.red, fontWeight: FontWeight.bold),
                    )
                  else
                    buildUserData(screenWidth, context),

                  // Bottom container (scrollable content inside)
                  Expanded(
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.only(
                          topLeft: Radius.circular(20.r),
                          topRight: Radius.circular(20.r),
                        ),
                        color: AppColors.white,
                      ),
                      child: SingleChildScrollView(
                        child: Column(
                          children: [
                            const SizedBox(height: 20),
                            _buildMoneyEarnedSection(screenWidth, context),
                            const SizedBox(height: 10),
                            _buildReuseOilPickup(screenWidth, context),
                            _buildMonthlyDropdown(screenWidth, context),
                            const SizedBox(height: 10),
                            buildWeeklyProgress(
                                screenWidth, userData?["weekly"] ?? []),
                            const SizedBox(height: 20),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          const DraggableChatbotButton(),
        ],
      ),
    );
  }

  Widget _buildShimmerList() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // ‚úÖ Shimmer for Total Revenue Section
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              _shimmerBox(height: 32, width: 120), // Fake Revenue
              _shimmerBox(height: 60, width: 60), // Fake Circular Indicator
            ],
          ),
        ),
        const SizedBox(height: 10),
        // ‚úÖ Shimmer for Online & Cash Payment Progress Bars
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(child: _shimmerBox(height: 20, width: 100)),
              // Fake Online Payment
              const SizedBox(width: 10),
              Expanded(child: _shimmerBox(height: 20, width: 100)),
              // Fake Cash Payment
            ],
          ),
        ),
        const SizedBox(height: 10),
        // ‚úÖ Shimmer for Weekly Progress Cards
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: Row(
              children: List.generate(
                4,
                (index) => Container(
                  margin: const EdgeInsets.symmetric(horizontal: 8),
                  child: _shimmerBox(height: 100, width: 80), // Fake Week Card
                ),
              ),
            ),
          ),
        ),
        const SizedBox(height: 20),
        // ‚úÖ Shimmer for Oil Pickup Section
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: _shimmerBox(height: 50, width: double.infinity),
        ),
      ],
    );
  }

  /// ‚úÖ Shimmer Box Helper Function
  Widget _shimmerBox({double height = 20, double width = double.infinity}) {
    return shimmer.Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: Container(
        height: height,
        width: width,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  // Update your buildUserData method to only include the green card:
  Widget buildUserData(double screenWidth, BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final formatter = NumberFormat('#,##0'); // Create number formatter

    if (userData == null) {
      return const Text(
        "‚ùå Too many attempts, please wait 5‚Äì10 seconds and switch tab",
        style: TextStyle(color: Colors.red),
      );
    }

    final totalRevenue = userData?["total"]?["revenue"] ?? 0;
    final totalQuantity = userData?["total"]?["quantity"] ?? 0;

    return Column(
      children: [
        // üíö Green Card ONLY
        Container(
          margin: const EdgeInsets.all(16),
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
          decoration: BoxDecoration(
            image: const DecorationImage(
              image: AssetImage("assets/image/cover.png"),
              fit: BoxFit.cover,
            ),
            color: isDark ? const Color(0xFF2F4F1F) : const Color(0xFF6FA006),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            children: [
              Text(
                'Year 2025',
                style: TextStyle(
                  color: isDark ? Colors.white : Colors.black,
                  fontWeight: FontWeight.bold,
                  fontSize: 22,
                ),
              ),
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  Column(
                    children: [
                      Text(
                        'Total Amount',
                        style: TextStyle(
                          color: isDark ? Colors.white70 : Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: 18,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Text(
                            '‚Çπ ${formatter.format(totalRevenue)}',
                            style: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 22,
                            ),
                          ),
                          const SizedBox(width: 4),
                          Lottie.asset(
                            'assets/animations/money.json',
                            width: 30,
                            height: 30,
                            repeat: true,
                            fit: BoxFit.cover,
                          ),
                        ],
                      ),
                    ],
                  ),
                  Column(
                    children: [
                      Text(
                        'Total Oil KG',
                        style: TextStyle(
                          color: isDark ? Colors.white70 : Colors.black,
                          fontWeight: FontWeight.bold,
                          fontSize: 18,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Row(
                        children: [
                          Lottie.asset(
                            'assets/animations/fuelnew.json',
                            width: 30,
                            height: 30,
                            repeat: true,
                            fit: BoxFit.cover,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            '${formatter.format(totalQuantity)} Kg',
                            style: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: 22,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
              const SizedBox(height: 12),
              Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Lottie.asset(
                    'assets/animations/hand.json',
                    width: 50,
                    height: 50,
                    repeat: true,
                    fit: BoxFit.cover,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: LinearProgressIndicator(
                      value: (totalQuantity / 1000).clamp(0.0, 1.0),
                      backgroundColor: isDark ? Colors.white10 : Colors.white30,
                      color: Colors.white,
                      minHeight: 8,
                      borderRadius: BorderRadius.circular(4),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Lottie.asset(
                    'assets/animations/hand.json',
                    width: 50,
                    height: 50,
                    repeat: true,
                    fit: BoxFit.cover,
                  ),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }

// Create a new method for the money section that will go inside the white background:
  Widget _buildMoneyEarnedSection(double screenWidth, BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final formatter = NumberFormat('#,##0');

    final onlinePayment = userData?["total_online_payment"] ?? 0;
    final cashPayment = userData?["total_cash_payment"] ?? 0;

    return Column(
      children: [
        Padding(
          padding: EdgeInsets.only(left: screenWidth * 0.05, bottom: 6),
          child: Align(
            alignment: Alignment.centerLeft,
            child: Text(
              "Money That You've Earned!",
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: isDark ? Colors.white : AppColors.titleColor,
              ),
            ),
          ),
        ),
        // üíµ Online & Cash Amount
        Padding(
          padding: EdgeInsets.symmetric(horizontal: screenWidth * 0.05),
          child: Row(
            children: [
              Expanded(
                child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  margin: const EdgeInsets.symmetric(horizontal: 6),
                  decoration: BoxDecoration(
                    color: isDark ? const Color(0xFF1F1F1F) : Colors.white,
                    border: Border.all(color: AppColors.secondaryColor),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Column(
                    children: [
                      Text(
                        "Online Transfer",
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: isDark ? Colors.white70 : AppColors.titleColor,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            "‚Çπ ${formatter.format(onlinePayment)}",
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: isDark
                                  ? Colors.lightGreenAccent
                                  : AppColors.primaryGreen,
                            ),
                          ),
                          const SizedBox(width: 4),
                          Lottie.asset(
                            'assets/animations/online.json',
                            width: 40,
                            height: 40,
                            repeat: true,
                            fit: BoxFit.cover,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
              Expanded(
                child: Container(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  margin: const EdgeInsets.symmetric(horizontal: 6),
                  decoration: BoxDecoration(
                    color: isDark ? const Color(0xFF1F1F1F) : Colors.white,
                    border: Border.all(color: AppColors.secondaryColor),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Column(
                    children: [
                      Text(
                        "Cash Amount",
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: isDark ? Colors.white70 : AppColors.titleColor,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            "‚Çπ ${formatter.format(cashPayment)}",
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: isDark
                                  ? Colors.lightGreenAccent
                                  : AppColors.primaryGreen,
                            ),
                          ),
                          const SizedBox(width: 4),
                          Lottie.asset(
                            'assets/animations/money.json',
                            width: 40,
                            height: 40,
                            repeat: true,
                            fit: BoxFit.cover,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

// ‚úÖ Show weekly progress dynamically, ensuring 4 weeks are displayed
  Widget buildWeeklyProgress(double screenWidth, List weeklyData) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    final textColor = isDarkMode ? Colors.white : AppColors.titleColor;
    final subTextColor = isDarkMode ? Colors.white70 : Colors.black;
    final cardBackground = isDarkMode ? const Color(0xFF1E1E1E) : Colors.white;
    final borderColor = isDarkMode ? Colors.white24 : Colors.black12;

    List<Map<String, dynamic>> defaultWeeks = [
      {"week": 1, "quantity": 0, "revenue": 0},
      {"week": 2, "quantity": 0, "revenue": 0},
      {"week": 3, "quantity": 0, "revenue": 0},
      {"week": 4, "quantity": 0, "revenue": 0},
    ];

    for (var weekData in weeklyData) {
      int weekNumber = weekData["week"];
      if (weekNumber >= 1 && weekNumber <= 4) {
        defaultWeeks[weekNumber - 1] = weekData;
      }
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding:
              EdgeInsets.symmetric(horizontal: screenWidth * 0.04, vertical: 8),
          child: Text(
            "Weekly Oil Collection Summary",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w600,
              color: textColor,
            ),
          ),
        ),
        SingleChildScrollView(
          scrollDirection: Axis.horizontal,
          padding: EdgeInsets.symmetric(horizontal: screenWidth * 0.04),
          child: Row(
            children: defaultWeeks.map<Widget>((week) {
              return _buildWeekCard(
                "Week ${week["week"]}",
                week["quantity"] > 0
                    ? "${week["quantity"]}KG / ${week["revenue"]}‚Çπ"
                    : "0 KG / 0 ‚Çπ",
                week["quantity"] > 0 ? week["quantity"] / 100 : 0,
                screenWidth,
                textColor,
                subTextColor,
                cardBackground,
                borderColor,
              );
            }).toList(),
          ),
        ),
        Padding(
          padding: const EdgeInsets.only(top: 10),
          child: Center(
            child: Text(
              "<  ${_getMonthName(DateTime.now().month)}  >",
              style: TextStyle(
                fontSize: 18,
                color: subTextColor,
              ),
            ),
          ),
        ),
      ],
    );
  }

// ‚úÖ Helper function to get month name
  String _getMonthName(int month) {
    List<String> months = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ];
    return months[month - 1];
  }

// Add this method to build Monthly Dropdown and Voucher Button side by side
  Widget _buildMonthlyDropdown(double screenWidth, BuildContext context) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;

    return Container(
      child: Padding(
        padding:
            EdgeInsets.symmetric(horizontal: screenWidth * 0.05, vertical: 10),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Text(
                  "Select Month & View Vouchers",
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: isDarkMode ? Colors.white : AppColors.titleColor,
                    // üåì Text color
                  ),
                ),
                Icon(Icons.event, color: AppColors.titleColor),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // üóì Monthly Dropdown
                Expanded(
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 10),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      border: Border.all(
                          color: isDarkMode
                              ? Colors.white38
                              : AppColors.fboColor),
                      color: isDarkMode ? Colors.grey[900] : Colors.white,
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<int>(
                        dropdownColor:
                            isDarkMode ? Colors.grey[900] : Colors.white,
                        value: 1,
                        items: List.generate(12, (index) {
                          return DropdownMenuItem<int>(
                            value: index + 1,
                            child: Text(
                              _getMonthName(index + 1),
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                color: isDarkMode
                                    ? Colors.white
                                    : AppColors.titleColor,
                              ),
                            ),
                          );
                        }),
                        onChanged: (int? newMonth) {
                          if (newMonth != null) {
                            GoRouter.of(context).push(
                              '/monthly-view',
                              extra: {'month': newMonth},
                            );
                          }
                        },
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                // üé´ Voucher Button
                GestureDetector(
                  onTap: () {
                    context.push('/voucherPage'); // ‚úÖ Go to voucher pa
                  },
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                        vertical: 12, horizontal: 25),
                    decoration: BoxDecoration(
                      color: isDarkMode
                          ? const Color(0xFF6FA006)
                          : AppColors.fboColor,
                      borderRadius: BorderRadius.circular(10),
                      boxShadow: [
                        BoxShadow(
                          color: isDarkMode
                              ? Colors.black.withOpacity(0.6)
                              : Colors.black.withOpacity(0.3),
                          offset: const Offset(3, 4),
                          blurRadius: 6,
                        ),
                        BoxShadow(
                          color: isDarkMode ? Colors.white12 : Colors.white24,
                          offset: const Offset(-2, -2),
                          blurRadius: 4,
                        ),
                      ],
                    ),
                    child: const Text(
                      "Voucher",
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                        shadows: [
                          Shadow(
                            offset: Offset(1, 1),
                            blurRadius: 2,
                            color: Colors.black38,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildWeekCard(
      String week,
      String details,
      double progress,
      double screenWidth,
      Color textColor,
      Color subTextColor,
      Color cardBackground,
      Color borderColor) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: screenWidth * 0.03),
      padding: EdgeInsets.all(screenWidth * 0.03),
      width: screenWidth * 0.25,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: Colors.black12, width: 1), // ‚úÖ Border added
        // boxShadow removed
      ),
      child: Column(
        children: [
          Text(
            week,
            style: const TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w100,
              color: AppColors.primaryGreen,
            ),
          ),
          Text(
            details,
            style: const TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w100,
              color: AppColors.primaryGreen,
            ),
          ),
          const SizedBox(height: 5),
        ],
      ),
    );
  }

// ‚úÖ Reuse oil pickup section with separate Voucher button
  Widget _buildReuseOilPickup(double screenWidth, BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;

    return Padding(
      padding:
          EdgeInsets.symmetric(horizontal: screenWidth * 0.05, vertical: 20),
      child: Container(
        padding: const EdgeInsets.all(10),
        decoration: BoxDecoration(
          color: isDark ? const Color(0xFF558400) : AppColors.fboColor,
          borderRadius: BorderRadius.circular(15),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              "Manage Oil Pickup",
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            SizedBox(height: 4), // spacing between title & subtitle
            Text(
              "Confirm request a sale of your Used oil",
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.normal,
                color: Colors.white70,
              ),
            ),

            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: _buildActionButton(
                    title: "Acknowledge",
                    context: context,
                    onTap: () {
                      context.push(
                          '/FboAcknowledgmentScreen'); // ‚úÖ Go to voucher pa
                    },
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: _buildActionButton(
                    title: "Request Sale",
                    context: context,
                    onTap: () {
                      context.push('/OilPlacedScreen'); // ‚úÖ Go to voucher pa
                    },
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActionButton({
    required String title,
    required VoidCallback onTap,
    required BuildContext context,
  }) {
    bool _isPressed = false;
    final isDark = Theme.of(context).brightness == Brightness.dark;

    return StatefulBuilder(
      builder: (context, setState) {
        return GestureDetector(
          onTapDown: (_) => setState(() => _isPressed = true),
          onTapUp: (_) {
            setState(() => _isPressed = false);
            onTap();
          },
          onTapCancel: () => setState(() => _isPressed = false),
          child: AnimatedContainer(
            duration: const Duration(milliseconds: 150),
            transform: _isPressed
                ? (Matrix4.identity()..scale(0.97))
                : Matrix4.identity(),
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              color: isDark ? const Color(0xFF2E2E2E) : Colors.white,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: isDark ? Colors.black54 : Colors.black26,
                  offset: const Offset(2, 2),
                  blurRadius: 6,
                ),
              ],
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // Title text
                Expanded(
                  child: Text(
                    title,
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 13,
                      fontWeight: FontWeight.bold,
                      color: isDark
                          ? Colors.lightGreenAccent.shade100
                          : AppColors.primaryGreen,
                    ),
                  ),
                ),

                const SizedBox(width: 10),

                // Arrow container
                Container(
                  padding: const EdgeInsets.all(6),
                  decoration: BoxDecoration(
                    color: isDark ? Colors.black : Colors.white,
                    borderRadius: BorderRadius.circular(8),
                    boxShadow: [
                      BoxShadow(
                        color: isDark ? Colors.black87 : Colors.black26,
                        offset: const Offset(2, 2),
                        blurRadius: 4,
                      ),
                    ],
                  ),
                  child: Icon(
                    Icons.arrow_forward,
                    size: 18,
                    color: isDark
                        ? Colors.lightGreenAccent.shade100
                        : AppColors.primaryGreen,
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

class MyWidget extends StatefulWidget {
  @override
  _MyWidgetState createState() => _MyWidgetState();
}

class _MyWidgetState extends State<MyWidget> {
  bool isLoading = true;
  bool hasError = false;
  List<Map<String, dynamic>> rangeDataList = []; // Declare list here
  @override
  void initState() {
    super.initState();
    fetchRangeData();
  }

  Future<void> fetchRangeData() async {
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      String? token = prefs.getString('token');

      Map<String, String> headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      };

      final response = await http.get(
        Uri.parse(ApiConfig.getRange),
        headers: headers,
      );

      print("Response Status Code: ${response.statusCode}");
      print("Response Body: ${response.body}");

      if (response.statusCode == 200) {
        final jsonData = json.decode(response.body);
        if (jsonData['data'] != null && jsonData['data'].isNotEmpty) {
          if (!mounted) return; // ‚úÖ Check before setState
          setState(() {
            rangeDataList = List<Map<String, dynamic>>.from(jsonData['data']);
            isLoading = false;
          });

          print("üü¢ Updated rangeDataList: $rangeDataList"); // Debugging
        } else {
          if (!mounted) return; // ‚úÖ Check before setState
          setState(() {
            hasError = true;
            isLoading = false;
          });
        }
      } else {
        if (!mounted) return; // ‚úÖ Check before setState
        setState(() {
          hasError = true;
          isLoading = false;
        });
      }
    } catch (e) {
      if (!mounted) return; // ‚úÖ Check before setState
      setState(() {
        hasError = true;
        isLoading = false;
      });
      print('Error: $e');
    }
  }

  Widget _buildRangeList() {
    print("üîπ UI Rebuilding with rangeDataList: $rangeDataList");

    if (isLoading) {
      return const Center(child: CircularProgressIndicator());
    }
    if (hasError || rangeDataList.isEmpty) {
      return const Center(
        child: Text("Failed to load price ranges",
            style: TextStyle(color: Colors.red)),
      );
    }
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Padding(
          padding: EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Text(
            "Oil Amount Price List",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Color(0xFF006D04),
            ),
          ),
        ),
        SizedBox(
          height: 70,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 16),
            itemCount: rangeDataList.length,
            itemBuilder: (context, index) {
              final rangeData = rangeDataList[index];
              return Container(
                width: 220,
                margin: const EdgeInsets.only(right: 12),
                padding:
                    const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  color: const Color(0x1A87BD23),
                  borderRadius: BorderRadius.circular(10),
                  border: Border.all(
                    color: const Color(0x1A87BD23),
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.04),
                      blurRadius: 3,
                      offset: const Offset(0, 1),
                    ),
                  ],
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      "From: ${rangeData['from']}Kg",
                      style: const TextStyle(
                        fontSize: 12,
                        fontWeight: FontWeight.w700,
                        color: Color(0xFF006D04),
                      ),
                    ),
                    Text(
                      "To: ${rangeData['to']}Kg",
                      style: const TextStyle(
                        fontSize: 12,
                        fontWeight: FontWeight.w700,
                        color: Color(0xFF006D04),
                      ),
                    ),
                    Text(
                      "‚Çπ${rangeData['price']}",
                      style: const TextStyle(
                        color: Color(0xFF006D04),
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return _buildRangeList();
  }
}


///// monthly history

import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:lottie/lottie.dart';
import '../../common/custom_appbar.dart';
import '../../fbo_services/monthly_sale_service.dart';

class MonthlyViewPage extends StatefulWidget {
  final int month;

  const MonthlyViewPage({Key? key, required this.month}) : super(key: key);

  @override
  _MonthlyViewPageState createState() => _MonthlyViewPageState();
}

class _MonthlyViewPageState extends State<MonthlyViewPage> {
  bool isLoading = true;
  bool hasError = false;
  List<dynamic> weeklyData = [];
  bool isEmptyData = false;

  @override
  void initState() {
    super.initState();
    _fetchMonthlyData();
  }

  final ThemeData appTheme = ThemeData(
    brightness: Brightness.light,
    primaryColor: const Color(0xFF006D04),
    hintColor: const Color(0xFFB2DFDB),
    scaffoldBackgroundColor: Colors.white,
    textTheme: const TextTheme(
      titleLarge: TextStyle(
        fontSize: 20,
        fontWeight: FontWeight.bold,
        color: Color(0xFF006D04),
      ),
      bodyMedium: TextStyle(
        fontSize: 16,
        color: Colors.black87,
      ),
    ),
    chipTheme: ChipThemeData(
      backgroundColor: const Color(0xFFF4FBF2),
      labelStyle: const TextStyle(color: Color(0xFF006D04)),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
    ),
  );

  final ThemeData darkTheme = ThemeData(
    brightness: Brightness.dark,
    primaryColor: const Color(0xFF006D04),
    hintColor: const Color(0xFFB2DFDB),
    scaffoldBackgroundColor: Colors.black,
    textTheme: const TextTheme(
      titleLarge: TextStyle(
        fontSize: 20,
        fontWeight: FontWeight.bold,
        color: Colors.white,
      ),
      bodyMedium: TextStyle(
        fontSize: 16,
        color: Colors.white70,
      ),
    ),
    chipTheme: ChipThemeData(
      backgroundColor: const Color(0xFF1E1E1E),
      labelStyle: const TextStyle(color: Color(0xFFB2DFDB)),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.all(Radius.circular(8))),
    ),
  );
  Future<void> _fetchMonthlyData() async {
    final data = await MonthlySaleService.fetchMonthlyData(widget.month);

    if (data != null && data["status"] == "success") {
      final dynamic rawData = data["data"];

      setState(() {
        if (rawData is List && rawData.isEmpty) {
          isEmptyData = true;
        } else if (rawData is List && rawData.isNotEmpty) {
          weeklyData = rawData;
        } else {
          weeklyData = [];
        }
        isLoading = false;
      });
    } else {
      setState(() {
        hasError = true;
        isLoading = false;
      });
    }
  }
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
   // final isDarkMode = theme.brightness == Brightness.dark;

    return Scaffold(
      backgroundColor: theme.scaffoldBackgroundColor,
      appBar: CustomAppBar(),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : hasError
          ? Center(
        child: Text(
          "‚ùå Failed to load data",
          style: TextStyle(color: Colors.red.shade400),
        ),
      )
          : isEmptyData
          ? _buildEmptyUI()
          : _buildResponsiveLayout(context),
    );
  }

  // Widget _buildWeeklyListView() {
  //   return ListView.builder(
  //     itemCount: weeklyData.length,
  //     itemBuilder: (context, index) {
  //       final week = weeklyData[index];
  //       return _buildWeekSummaryCard(week);
  //     },
  //   );
  // }
  Widget _buildWeekSummaryCard(Map<String, dynamic> week) {
    //final oilTypes = (week['oil_types'] ?? []) as List<dynamic>;
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    final theme = Theme.of(context);
    final screenWidth = MediaQuery.of(context).size.width;
    final isTablet = screenWidth >= 600;

    return _buildAnimatedCard(
      Card(
        color: isDarkMode ? const Color(0xFF1E1E1E) : Colors.white,
        margin: const EdgeInsets.symmetric(vertical: 8),
        elevation: 4,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
        child: Theme(
          data: theme.copyWith(dividerColor: Colors.transparent),
          child: isTablet
              ? InkWell(
            onTap: () => _showWeekDetailsPopup(context, week),
            child: ListTile(
              title: Text(
                "${week['week']?.toUpperCase() ?? 'Week'} - Revenue: ‚Çπ${week['revenue'] ?? 0}",
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: isDarkMode ? Colors.white : const Color(0xFF006D04),
                ),
              ),
              subtitle: Text(
                "Total Oil: ${week['quantity'] ?? 0} Kg",
                style: TextStyle(
                  fontSize: 14,
                  color: isDarkMode ? Colors.white70 : const Color(0xFF006D04),
                ),
              ),
              trailing: const Icon(Icons.arrow_forward_ios_rounded, size: 16),
            ),
          )
              : ExpansionTile(
            title: Text(
              "${week['week']?.toUpperCase() ?? 'Week'} - Revenue: ‚Çπ${week['revenue'] ?? 0}",
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: isDarkMode ? Colors.white : const Color(0xFF006D04),
              ),
            ),
            subtitle: Text(
              "Total Oil: ${week['quantity'] ?? 0} Kg",
              style: TextStyle(
                fontSize: 14,
                color: isDarkMode ? Colors.white70 : const Color(0xFF006D04),
              ),
            ),
            childrenPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            children: [
              _buildWeekDetailContent(week),
            ],
          ),
        ),
      ),
    );
  }

  void _showWeekDetailsPopup(BuildContext context, Map<String, dynamic> week) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Theme.of(context).cardColor,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
      ),
      builder: (_) => DraggableScrollableSheet(
        expand: false,
        initialChildSize: 0.85,
        minChildSize: 0.5,
        maxChildSize: 0.95,
        builder: (_, controller) => SingleChildScrollView(
          controller: controller,
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Center(
                child: Container(
                  width: 50,
                  height: 5,
                  margin: const EdgeInsets.only(bottom: 16),
                  decoration: BoxDecoration(
                    color: Colors.grey[400],
                    borderRadius: BorderRadius.circular(5),
                  ),
                ),
              ),
              Text(
                "${week['week']?.toUpperCase() ?? 'Week'} - ‚Çπ${week['revenue']}",
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF006D04),
                ),
              ),
              const SizedBox(height: 8),
              Text(
                "Total Oil: ${week['quantity']} Kg",
                style: const TextStyle(fontSize: 14, color: Color(0xFF7FBF08)),
              ),
              const Divider(height: 24),
              _buildWeekDetailContent(week),
            ],
          ),
        ),
      ),
    );
  }


  Widget _buildWeekDetailContent(Map<String, dynamic> week) {
    final oilTypes = (week['oil_types'] ?? []) as List<dynamic>;
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Wrap(
          spacing: 8,
          runSpacing: 6,
          children: oilTypes.map((oil) {
            return Chip(
              backgroundColor: isDarkMode
                  ? const Color(0xFF2C2C2C)
                  : const Color(0xFFF4FBF2),
              label: Text(
                "${oil['type']}: ${oil['quantity']} Kg",
                style: TextStyle(
                  color: isDarkMode ? Colors.white : const Color(0xFF006D04),
                ),
              ),
            );
          }).toList(),
        ),
        const SizedBox(height: 12),
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildInfoBox("Online Transfer", week['online'].toString(), isDarkMode),
            _buildInfoBox("Cash Amount", week['cash'].toString(), isDarkMode),
          ],
        ),
        const SizedBox(height: 12),
        _buildDetailsList(context, week['details'] ?? []),
      ],
    );
  }


  Widget _buildWeeklyRevenueChart() {
    return LayoutBuilder(
      builder: (context, constraints) {
        double screenWidth = constraints.maxWidth;

        return Center(
          child: Container(
            constraints: BoxConstraints(maxWidth: 700), // limit max width on wide screens
            padding: const EdgeInsets.all(16),
            margin: const EdgeInsets.symmetric(vertical: 12),
            decoration: BoxDecoration(
              color: const Color(0xFFF9FCFF),
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black12,
                  blurRadius: 5,
                  offset: Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Text(
                      "Total Revenue",
                      style: TextStyle(fontSize: 14, color: Color(0xFF7FBF08)),
                    ),
                    const Spacer(),
                    Icon(
                      weeklyData.length > 1 &&
                          weeklyData.last['revenue'] < weeklyData[weeklyData.length - 2]['revenue']
                          ? Icons.arrow_downward
                          : Icons.arrow_upward,
                      color: weeklyData.length > 1 &&
                          weeklyData.last['revenue'] < weeklyData[weeklyData.length - 2]['revenue']
                          ? Colors.red
                          : Color(0xFF006D04),
                      size: 20,
                    )
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  "‚Çπ${NumberFormat('#,##0').format(_sumByField('revenue'))}",
                  style: TextStyle(
                    fontSize: screenWidth < 360 ? 20 : 28,
                    fontWeight: FontWeight.bold,
                    color: const Color(0xFF006D04),
                  ),
                ),
                const SizedBox(height: 12),
                AspectRatio(
                  aspectRatio: screenWidth < 400 ? 1.2 : 1.6,
                  child: _buildLineChart(screenWidth),
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    _buildChartSummary("Online", _sumByField('online')),
                    _buildChartSummary("Cash", _sumByField('cash')),
                    _buildChartSummary("Total Oil", _sumByField('quantity')),
                  ],
                )
              ],
            ),
          ),
        );
      },
    );
  }
  Widget _buildLineChart(double screenWidth) {
    List<FlSpot> revenueSpots = [];
    double maxRevenue = 0;

    for (int i = 0; i < weeklyData.length; i++) {
      final revenue = (weeklyData[i]['revenue'] ?? 0).toDouble();
      revenueSpots.add(FlSpot(i.toDouble(), revenue));
      if (revenue > maxRevenue) maxRevenue = revenue;
    }

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      padding: const EdgeInsets.only(left: 8),
      child: SizedBox(
        width: weeklyData.length * 60, // Dynamic width based on weeks
        child: LineChart(
          LineChartData(
            minY: 0,
            maxY: maxRevenue * 1.2,
            gridData: FlGridData(show: true),
            borderData: FlBorderData(show: false),
            titlesData: FlTitlesData(
              leftTitles: AxisTitles(
                sideTitles: SideTitles(
                  showTitles: true,
                  reservedSize: 40,
                  getTitlesWidget: (value, _) => Text('${value.toInt()}'),
                ),
              ),
              bottomTitles: AxisTitles(
                sideTitles: SideTitles(
                  showTitles: true,
                  interval: 1,
                  reservedSize: 36,
                  getTitlesWidget: (value, _) {
                    final index = value.toInt();
                    if (index >= 0 && index < weeklyData.length) {
                      return Padding(
                        padding: const EdgeInsets.only(top: 6),
                        child: Text(
                          'Week ${index + 1}',
                          style: const TextStyle(
                            fontSize: 12,
                            color: Color(0xFF7FBF08),
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      );
                    }
                    return const SizedBox.shrink();
                  },
                ),
              ),
              topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
              rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
            ),
            lineBarsData: [
              LineChartBarData(
                spots: revenueSpots,
                isCurved: true,
                color: const Color(0xFF006D04),
                barWidth: 3,
                belowBarData: BarAreaData(
                  show: true,
                  color: const Color(0xFF006D04).withOpacity(0.1),
                ),
                dotData: FlDotData(
                  show: true,
                  getDotPainter: (spot, percent, barData, index) => FlDotCirclePainter(
                    radius: 4,
                    color: Colors.white,
                    strokeWidth: 2,
                    strokeColor: const Color(0xFF006D04),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildChartSummary(String label, int value) {
    return Column(
      children: [
        Text(
          value.toString(),
          style: const TextStyle(fontWeight: FontWeight.bold,color:Color(0xFF006D04), fontSize: 16),
        ),
        const SizedBox(height: 2),
        Text(
          label,
          style: const TextStyle(color:Color(0xFF7FBF08), fontSize: 12,fontWeight: FontWeight.bold),
        ),
      ],
    );
  }
  int _sumByField(String field) {
    return weeklyData.fold<int>(
      0,
          (sum, item) => sum + ((item[field] ?? 0) as num).toInt(),
    );
  }
  Widget _buildInfoBox(String label, String value, bool isDarkMode) {
    return Column(
      children: [
        Text(
          label,
          style: TextStyle(
            fontSize: 14,
            color: isDarkMode ? Colors.white60 : Colors.grey[700],
          ),
        ),
        const SizedBox(height: 4),
        Text(
          value,
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: isDarkMode ? Colors.white : const Color(0xFF006D04),
          ),
        ),
      ],
    );
  }
  Widget _buildDetailsList(BuildContext context, List<dynamic> details) {
    final screenHeight = MediaQuery.of(context).size.height;
    //final maxHeight = screenHeight * 0.5; // max 50% of screen height

    return Container(
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.4,
      ),
      child: ListView.separated(
        shrinkWrap: true,
        physics: AlwaysScrollableScrollPhysics(),
        itemCount: details.length,
        separatorBuilder: (_, __) => const Divider(height: 1, thickness: 0.5),
        itemBuilder: (context, index) {
          final detail = details[index];
          final oilTypes = (detail['oil_types'] ?? []) as List<dynamic>;
          final oilName = oilTypes.isNotEmpty ? oilTypes[0]['type'] ?? 'Unknown Oil' : 'Unknown Oil';
          final oilQuantity = detail['quantity']?.toString() ?? '0';
          final date = detail['date'] ?? '';
          final time = detail['time']?.substring(0, 5) ?? '';
          final online = detail['online'] ?? 0;
          final cash = detail['cash'] ?? 0;
          final totalAmount = online + cash;

          // Adapt font size by screen height (smaller on smaller screens)
          double baseFontSize = screenHeight < 600 ? 12 : 14;

          return ListTile(
            contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 2), // reduced vertical padding
            title: Text(
              "$date at $time",
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: const Color(0xFF006D04),
                fontSize: baseFontSize + 2,
              ),
            ),
            subtitle: Text(
              "Oil: $oilName \nQuantity: $oilQuantity Kg",
              style: TextStyle(
                color: const Color(0xFF7FBF08),
                fontSize: baseFontSize,
              ),
            ),
            trailing: SizedBox(
              height: 56,
              child: FittedBox(
                fit: BoxFit.scaleDown,
                alignment: Alignment.centerRight,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.end,
                  children: [
                    Text(
                      "Online: $online",
                      style: TextStyle(
                        color: const Color(0xFF006D04),
                        fontSize: 12,
                        height: 1.1,
                      ),
                    ),
                    Text(
                      "Cash: $cash",
                      style: TextStyle(
                        color: Colors.green,
                        fontSize: 12,
                        height: 1.1,
                      ),
                    ),
                    Text(
                      "Total: $totalAmount",
                      style: TextStyle(
                        color: Colors.black87,
                        fontWeight: FontWeight.w600,
                        fontSize: 12,
                        height: 1.1,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }





  Widget _buildEmptyUI() {
    return Center(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Lottie.asset("assets/animations/empty.json", width: 200),
          const SizedBox(height: 10),
          const Text(
            "No Data Available",
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 5),
          const Text("There is no sales data available for this month."),
        ],
      ),
    );
  }
  Widget _buildAnimatedCard(Widget child) {
    return AnimatedContainer(
      duration: Duration(milliseconds: 300),
      curve: Curves.easeInOut,
      child: child,
    );
  }
  Widget _buildResponsiveLayout(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final chart = _buildWeeklyRevenueChart();

    return SingleChildScrollView(
      padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 10),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          chart,
          const SizedBox(height: 12),
          screenWidth < 600
              ? Column(
            children: weeklyData.map((week) => _buildWeekSummaryCard(week)).toList(),
          )
              : GridView.builder(
            padding: EdgeInsets.zero,
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 2,
              mainAxisExtent: 320,
              crossAxisSpacing: 10,
              mainAxisSpacing: 10,
            ),
            itemCount: weeklyData.length,
            itemBuilder: (context, index) {
              final week = weeklyData[index];
              return _buildWeekSummaryCard(week);
            },
          ),
        ],
      ),
    );
  }

}
